#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (C) 2013 Canonical Ltd.
# Author: St√©phane Graber <stgraber@ubuntu.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import time
sys.path.insert(0, 'lib')

from systemimage import config
from systemimage import gpg
from systemimage import tools

conf = config.Config()

# archive-master keyring
if os.path.exists(os.path.join(conf.gpg_key_path, "archive-master")):
    archive_master = gpg.Keyring(conf, "archive-master")
    archive_master.set_metadata("archive-master")
    archive_master.import_keys(os.path.join(conf.gpg_key_path,
                                            "archive-master"))
    path = archive_master.generate_tarball()
    tools.xz_compress(path)
    os.remove(path)
    gpg.sign_file(conf, "archive-master", "%s.xz" % path)

# image-master keyring
if os.path.exists(os.path.join(conf.gpg_key_path, "image-master")) and \
        os.path.exists(os.path.join(conf.gpg_key_path, "archive-master")):
    image_master = gpg.Keyring(conf, "image-master")
    image_master.set_metadata("image-master")
    image_master.import_keys(os.path.join(conf.gpg_key_path, "image-master"))
    path = image_master.generate_tarball()
    tools.xz_compress(path)
    os.remove(path)
    gpg.sign_file(conf, "archive-master", "%s.xz" % path)

# image-signing keyring
if os.path.exists(os.path.join(conf.gpg_key_path, "image-signing")) and \
        os.path.exists(os.path.join(conf.gpg_key_path, "image-master")):
    image_signing = gpg.Keyring(conf, "image-signing")
    image_signing.set_metadata("image-signing",
                               int(time.strftime("%s",
                                                 time.localtime())) + 63072000)
    image_signing.import_keys(os.path.join(conf.gpg_key_path, "image-signing"))
    path = image_signing.generate_tarball()
    tools.xz_compress(path)
    os.remove(path)
    gpg.sign_file(conf, "image-master", "%s.xz" % path)

# device-signing keyring
if os.path.exists(os.path.join(conf.gpg_key_path, "device-signing")) and \
        os.path.exists(os.path.join(conf.gpg_key_path, "image-signing")):
    device_signing = gpg.Keyring(conf, "device-signing")
    device_signing.set_metadata("device-signing",
                                int(time.strftime("%s",
                                                  time.localtime())) + 2678400)
    device_signing.import_keys(os.path.join(conf.gpg_key_path,
                                            "device-signing"))
    path = device_signing.generate_tarball()
    tools.xz_compress(path)
    os.remove(path)
    gpg.sign_file(conf, "image-signing", "%s.xz" % path)

# blacklist keyring
if os.path.exists(os.path.join(conf.gpg_key_path, "blacklist")) and \
        os.path.exists(os.path.join(conf.gpg_key_path, "image-master")):
    blacklist = gpg.Keyring(conf, "blacklist")
    blacklist.set_metadata("blacklist")
    path = blacklist.generate_tarball()
    tools.xz_compress(path)
    os.remove(path)
    gpg.sign_file(conf, "image-master", "%s.xz" % path)
