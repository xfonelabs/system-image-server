#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (C) 2013 Canonical Ltd.
# Author: St√©phane Graber <stgraber@ubuntu.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import time
import logging
import fcntl
import argparse
import os
import sys

sys.path.insert(0, os.path.join(sys.path[0], os.pardir, "lib"))
from systemimage import config, generators, tools, tree


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="image importer")
    parser.add_argument("--verbose", "-v", action="count", default=0)
    args = parser.parse_args()

    # Setup logging
    formatter = logging.Formatter(
        "%(asctime)s %(levelname)s %(message)s")

    levels = {1: logging.ERROR,
              2: logging.WARNING,
              3: logging.INFO,
              4: logging.DEBUG}

    if args.verbose > 0:
        stdoutlogger = logging.StreamHandler(sys.stdout)
        stdoutlogger.setFormatter(formatter)
        logging.root.setLevel(levels[min(4, args.verbose)])
        logging.root.addHandler(stdoutlogger)
    else:
        logging.root.addHandler(logging.NullHandler())

    # Load the configuration
    conf = config.Config()

    # Try to acquire a global lock
    lock_file = os.path.join(conf.state_path, "global.lock")
    lock_fd = open(lock_file, 'w')

    try:
        fcntl.lockf(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        logging.info("Something else holds the global lock. exiting.")
        sys.exit(0)

    # Load the tree
    pub = tree.Tree(conf)

    # Iterate through the channels
    for channel_name, channel in conf.channels.items():
        # We're only interested in automated channels
        if channel.type != "auto":
            logging.debug("Skipping non-auto channel: %s" % channel_name)
            continue

        logging.info("Processing channel: %s" % channel_name)

        # Check the channel exists
        if channel_name not in pub.list_channels():
            logging.error("Invalid channel name: %s" % channel_name)
            continue

        # Iterate through the devices
        for device_name in pub.list_channels()[channel_name]['devices']:
            logging.info("Processing device: %s" % device_name)

            device_entry = \
                pub.list_channels()[channel_name]['devices'][device_name]
            if "redirect" in device_entry:
                logging.info("Device is a redirect, not considering.")
                continue

            device = pub.get_device(channel_name, device_name)

            # Extract last full version
            full_images = {image['version']: image
                           for image in device.list_images()
                           if image['type'] == "full"}

            last_full = None
            if full_images:
                last_full = sorted(full_images.values(),
                                   key=lambda image: image['version'])[-1]
                logging.debug("Last full image: %s" % last_full['version'])
            else:
                logging.debug("This is the first full image.")

            # Extract all delta base versions
            delta_base = []

            for base_channel in channel.deltabase:
                # Skip missing channels
                if base_channel not in pub.list_channels():
                    logging.warn("Invalid base channel: %s" % base_channel)
                    continue

                # Skip missing devices
                if device_name not in (pub.list_channels()
                                       [base_channel]['devices']):
                    logging.warn("Missing device in base channel: %s in %s" %
                                 (device_name, base_channel))
                    continue

                # Extract the latest full image
                base_device = pub.get_device(base_channel, device_name)
                base_images = sorted([image
                                      for image in base_device.list_images()
                                      if image['type'] == "full"],
                                     key=lambda image: image['version'])

                # Check if the version is valid and add it
                if base_images and base_images[-1]['version'] in full_images:
                    if (full_images[base_images[-1]['version']]
                            not in delta_base):
                        delta_base.append(full_images
                                          [base_images[-1]['version']])
                        logging.debug("Source version for delta: %s" %
                                      base_images[-1]['version'])

            # Allocate new version number
            new_version = channel.versionbase
            if last_full:
                new_version = last_full['version'] + 1
            logging.debug("Version for next image: %s" % new_version)

            # And the list used to generate version_detail
            version_detail = []

            # And a list of new files
            new_files = []

            # Keep track of what files we've processed
            processed_files = []

            # Create new empty entries
            new_images = {}
            new_images['full'] = {'files': []}
            for delta in delta_base:
                new_images['delta_%s' % delta['version']] = {'files': []}

            # Iterate through the files
            for file_entry in channel.files:
                # Deal with device specific overrides
                if "," in file_entry['name']:
                    file_name, file_device = file_entry['name'].split(",", 1)
                    if file_device != device_name:
                        logging.debug("Skipping '%s' because the device name"
                                      "doesn't match" % file_entry['name'])
                        continue
                else:
                    file_name = file_entry['name']

                if file_name in processed_files:
                    logging.debug("Skipping '%s' because a more specific"
                                  "generator was already called."
                                  % file_entry['name'])
                    continue

                processed_files.append(file_name)

                # Generate the environment
                environment = {}
                environment['channel_name'] = channel_name
                environment['device'] = device
                environment['device_name'] = device_name
                environment['version'] = new_version
                environment['version_detail'] = version_detail
                environment['new_files'] = new_files

                if file_name == "ubuntu":
                    new_tag = time.strftime("%Y-%m-%d")
                    last_tag = None
                    if last_full:
                        last_full_vd = last_full['version_detail']
                        if "," in last_full['version_detail']:
                            last_full_vd = last_full['version_detail'].split(
                                ",")
                        last_tag = tools.get_tags_on_version_detail(
                            last_full_vd)
                        logging.debug("Last image tag was %s" % last_tag)
                    if last_tag:
                        if last_tag == new_tag:
                            new_tag = "%s/2" % new_tag
                        elif "/" in last_tag:
                            ltag = last_tag.split("/")
                            if ltag[0] == new_tag:
                                new_tag = "%s/%i" % (new_tag, int(ltag[1]) + 1)
                    logging.debug("Setting tag to UBports image %s" % new_tag)
                    tools.set_tag_on_version_detail(
                        environment['version_detail'], new_tag)

                # Call file generator
                logging.info("Calling '%s' generator for a new file"
                             % file_entry['generator'])
                path = generators.generate_file(conf,
                                                file_entry['generator'],
                                                file_entry['arguments'],
                                                environment)

                # Generators are allowed to return None when no build
                # exists at all. This cancels the whole image.
                if not path:
                    new_files = []
                    logging.info("No image will be produced because the "
                                 "'%s' generator returned None" %
                                 file_entry['generator'])
                    break

                # Get the full and relative paths
                abspath, relpath = tools.expand_path(path, conf.publish_path)
                urlpath = "/%s" % "/".join(relpath.split(os.sep))

                # FIXME: Extract the prefix, used later for matching between
                #        full images. This forces a specific filename format.
                prefix = abspath.split("/")[-1].rsplit("-", 1)[0]

                # Add the file to the full image
                new_images['full']['files'].append(abspath)

                # Check if same as current
                new_file = True
                if last_full:
                    for file_dict in last_full['files']:
                        if file_dict['path'] == urlpath:
                            new_file = False
                            break

                if new_file:
                    logging.info("New file from '%s': %s" %
                                 (file_entry['generator'], relpath))
                    new_files.append(abspath)
                else:
                    logging.info("File from '%s' is already current" %
                                 (file_entry['generator']))

                # Generate deltas
                for delta in delta_base:
                    # Extract the source
                    src_path = None
                    for file_dict in delta['files']:
                        if (file_dict['path'].split("/")[-1]
                                .startswith(prefix)):
                            src_path = "%s/%s" % (conf.publish_path,
                                                  file_dict['path'])
                            break

                    # Check that it's not the current file
                    if src_path:
                        src_path = os.path.realpath(src_path)

                        # FIXME: the keyring- is a big hack...
                        if src_path == abspath and "keyring-" not in src_path:
                            continue

                        # Generators are allowed to return None when no delta
                        # exists at all.
                        logging.info("Generating delta from '%s' for '%s'" %
                                     (delta['version'],
                                      file_entry['generator']))
                        delta_path = generators.generate_delta(conf, src_path,
                                                               abspath)
                    else:
                        delta_path = abspath

                    if not delta_path:
                        continue

                    # Get the full and relative paths
                    delta_abspath, delta_relpath = tools.expand_path(
                        delta_path, conf.publish_path)

                    new_images['delta_%s' % delta['version']]['files'] \
                        .append(delta_abspath)

            # Check if we've got a new image
            if len(new_files):
                # Publish full image
                logging.info("Publishing new image '%s' (%s) with %s files."
                             % (new_version,
                                ",".join(environment['version_detail']),
                                len(new_images['full']['files'])))
                device.create_image(
                    "full", new_version,
                    ",".join(environment['version_detail']),
                    new_images['full']['files'],
                    version_detail=",".join(environment['version_detail']))

                # Publish deltas
                for delta in delta_base:
                    files = new_images['delta_%s' % delta['version']]['files']
                    logging.info("Publishing new delta from '%s' (%s)"
                                 " to '%s' (%s) with %s files" %
                                 (delta['version'],
                                  delta.get("description", ""),
                                  new_version,
                                  ",".join(environment['version_detail']),
                                  len(files)))
                    device.create_image(
                        "delta", new_version,
                        ",".join(environment['version_detail']), files,
                        base=delta['version'],
                        version_detail=",".join(environment['version_detail']))

            # Expire images
            if channel.fullcount > 0:
                logging.info("Expiring old images")
                device.expire_images(channel.fullcount)

        # Sync all channel aliases
        logging.info("Syncing any existing alias")
        pub.sync_aliases(channel_name)

    # Remove any orphaned file
    logging.info("Removing orphaned files from the pool")
    pub.cleanup_tree()

    # Sync the mirrors
    logging.info("Triggering a mirror sync")
    tools.sync_mirrors(conf)
